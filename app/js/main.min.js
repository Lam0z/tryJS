const sliderBtns=document.querySelectorAll(".slider__btn"),slider=document.querySelector(".slider__container"),wrapper=document.querySelector(".slider"),sliderItem=document.querySelectorAll(".slider__item"),slidesToShow=3;for(let e of sliderItem)e.style.minWidth=wrapper.offsetWidth/3+"px";console.log(sliderItem[1].offsetWidth);let pixels=0;sliderBtns[0].disabled=!0;for(let e of sliderBtns)e.addEventListener("click",e=>{e.target.classList.contains("next")&&(slider.style.transform+=`translateX(-${sliderItem[0].offsetWidth}px)`,pixels+=sliderItem[0].offsetWidth,pixels>0&&(sliderBtns[0].disabled=!1),600===pixels&&(sliderBtns[1].disabled=!0)),e.target.classList.contains("prev")&&(slider.style.transform+=`translateX(${sliderItem[0].offsetWidth}px)`,pixels-=sliderItem[0].offsetWidth,0==pixels&&(sliderBtns[0].disabled=!0),pixels<=600&&(sliderBtns[1].disabled=!1))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
