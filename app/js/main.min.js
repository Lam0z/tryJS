
//# sourceMappingURL=data:application/json;charset=utf8;base64,{"version":3,"sources":["main.js"],"names":[],"mappings":"AAAA","file":"main.min.js","sourcesContent":["// const messageField=document.querySelector('.tasks__field')\r\n// const messageCount=document.querySelector('.tasks__rule-info span')\r\n// const tasksSendBtn=document.querySelector('.tasks__btn')\r\n// const tasksList=document.querySelector('.tasks__list')\r\n// const templateListItem=document.querySelector(\"#list-item\").content\r\n// const priorityBtn=document.querySelector('.tasks__priority-btn')\r\n// let textInfo=document.createElement('p')\r\n// textInfo.textContent='Список задач пуст!'\r\n// textInfo.classList.add('text-center' ,'font-weight-bold', 'text-light')\r\n\r\n// if(tasksList.children.length==0){ tasksList.appendChild(textInfo)}\r\n// // if(messageField.value.length<=5){\r\n// //     tasksSendBtn.setAttribute('disabled','disabled')\r\n// // }\r\n// let addClosehandler=(closeBtn,element)=>{\r\n//     closeBtn.addEventListener('click',()=>{\r\n//         element.remove()\r\n//         if(tasksList.children.length==0){\r\n//             tasksList.appendChild(textInfo)\r\n//         }\r\n//     })\r\n// }\r\n\r\n// let createElement=()=>{\r\n//     let clonedTemplate=templateListItem.cloneNode('true')\r\n//     let item=clonedTemplate.querySelector('.tasks__item')\r\n//     let listMessage=item.querySelector('.tasks__text')\r\n//     let closeMessage=item.querySelector('.close-span')\r\n//     listMessage.textContent=messageField.value\r\n//     addClosehandler(closeMessage,item)\r\n//     tasksList.appendChild(item)\r\n//     messageField.value=''\r\n//     messageCount.textContent='0'\r\n//     if(tasksList.children.length!=0){\r\n//         textInfo.remove()\r\n//     }\r\n//     if(priorityBtn.classList.contains('btn-warning')){\r\n//         item.classList.add('bg-warning')\r\n        \r\n//     }\r\n//     tasksSendBtn.setAttribute('disabled','disabled')\r\n    \r\n\r\n// }\r\n// priorityBtn.addEventListener('click',()=>{\r\n    \r\n//     priorityBtn.classList.toggle('btn-warning')\r\n//     console.log();\r\n//     if(priorityBtn.classList.contains('btn-warning')){\r\n//         priorityBtn.textContent=\"Важная задача\"\r\n//     }else{\r\n//         priorityBtn.textContent='Обычная задача'\r\n//     }\r\n    \r\n// })\r\n// messageField.addEventListener('input',()=>{\r\n//     messageCount.textContent=messageField.value.length\r\n//     if(messageField.value.length>50||messageField.value.length<=3){\r\n//         tasksSendBtn.setAttribute('disabled','disabled')\r\n//     }\r\n//     if(messageField.value.length>50){\r\n//         messageField.style.borderColor='red'\r\n//         messageField.style.color='red'\r\n//         messageCount.style.color='red'\r\n        \r\n//     }else{\r\n//         messageField.style.borderColor=''\r\n//         messageField.style.color=''\r\n//         messageCount.style.color=''\r\n//         if(messageField.value.length>3){\r\n//             tasksSendBtn.removeAttribute('disabled')\r\n//         }\r\n        \r\n//     }\r\n// })\r\n// messageField.addEventListener('keydown',(e)=>{\r\n    \r\n//     if(e.key==='Enter'){\r\n//         e.preventDefault()\r\n//         console.log('press');\r\n//         createElement()\r\n//     }\r\n// })\r\n// tasksSendBtn.addEventListener('click',createElement)\r\n\r\n// // GALLERY code\r\n\r\n// const bigImgae=document.querySelector('.gallery__big-image img')\r\n// const previewsImages=document.querySelectorAll('.gallery__item img')\r\n// // console.log(bigImgae,prewiewsImages);\r\n// let addСlickHandler=(item)=>{\r\n//     item.addEventListener('click',()=>{\r\n//         bigImgae.src=item.src \r\n//         for (let i = 0; i < previewsImages.length; i++) {\r\n//             previewsImages[i].classList.remove('active')\r\n//         }\r\n//         item.classList.add('active')\r\n//     })\r\n// }\r\n// for (let i = 0; i < previewsImages.length; i++) {\r\n//     addСlickHandler(previewsImages[i])  \r\n// }\r\n\r\n// const sliderBtns=document.querySelectorAll('.slider__btn')\r\n// const slider=document.querySelector('.slider__container')\r\n// const wrapper=document.querySelector('.slider')\r\n// const sliderItem=document.querySelectorAll('.slider__item')\r\n// const slidesToShow=3\r\n\r\n\r\n\r\n// for(let item of sliderItem){\r\n//     item.style.minWidth=wrapper.offsetWidth/slidesToShow+'px'\r\n\r\n// }\r\n\r\n// console.log(sliderItem[1].offsetWidth);\r\n// let pixels=0\r\n// sliderBtns[0].disabled=true\r\n// for(let btn of sliderBtns){\r\n//     btn.addEventListener('click',(e)=>{\r\n        \r\n\r\n//         if(e.target.classList.contains('next')){\r\n//             slider.style.transform+=`translateX(-${sliderItem[0].offsetWidth}px)`\r\n//             pixels+=sliderItem[0].offsetWidth\r\n//             if(pixels>0){\r\n\r\n//                 sliderBtns[0].disabled=false\r\n//             }\r\n//             if(pixels===600){\r\n//                 sliderBtns[1].disabled=true\r\n\r\n//             }\r\n            \r\n//         }\r\n\r\n//         if(e.target.classList.contains('prev')){\r\n            \r\n//             slider.style.transform+=`translateX(${sliderItem[0].offsetWidth}px)`\r\n//             pixels-=sliderItem[0].offsetWidth\r\n//             if(pixels==0){\r\n//                 sliderBtns[0].disabled=true\r\n//             }\r\n//             if(pixels<=600){\r\n//                 sliderBtns[1].disabled=false\r\n//             }\r\n//         }\r\n//     })\r\n// }\r\n\r\n// const sliderLinks=document.querySelectorAll('.simple-slider__link')\r\n// const slides=document.querySelectorAll('.simple-slider__slide')\r\n// for (const i of slides) {\r\n//     i.classList.add('hidden')\r\n// }\r\n\r\n// let linkOver=(link,slide)=>{\r\n//     link.addEventListener('mouseover',(event)=>{\r\n//         for (let index = 0; index < slides.length; index++) {\r\n//             slides[index].classList.remove('active')\r\n//             slides[index].classList.add('hidden')\r\n//             sliderLinks[index].classList.remove('active-link')\r\n            \r\n            \r\n//         }\r\n        \r\n//         link.classList.add('active-link')\r\n//         slide.classList.add('active')\r\n        \r\n// }\r\n//     )}\r\n// for(let i =0;i<sliderLinks.length;i++){\r\n//     linkOver(sliderLinks[i],slides[i])\r\n//     // linkOut(sliderLinks[i],slides[i])\r\n\r\n// }\r\n\r\n"]}
