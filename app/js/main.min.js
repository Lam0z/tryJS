const accordeonLinks=document.querySelectorAll(".accordeon__link"),accordeonText=document.querySelectorAll(".accordeon__text");let showText=(e,o)=>{e.addEventListener("click",c=>{c.target.dataset.accordionIndexLink===o.dataset.accordionIndexText&&(o.classList.toggle("accordeon-show-text"),e.classList.toggle("accordeon-link-active"))})};for(let e=0;e<accordeonLinks.length;e++)accordeonLinks[e].dataset.accordionIndexLink=e,accordeonText[e].dataset.accordionIndexText=e,showText(accordeonLinks[e],accordeonText[e]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
